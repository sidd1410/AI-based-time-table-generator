"use client";

import { useState, useEffect, Suspense } from "react";
import Link from "next/link";
import { useSearchParams } from "next/navigation";
import { ExcelPreview } from "@/components/ui/excel-preview";
import { TimetableStats } from "@/components/ui/timetable-stats";
import { downloadTimetableAsExcel } from "@/lib/excel-utils";
import { downloadTimetableAsPDF, downloadSubjectsAsPDF } from "@/lib/pdf-utils";
import { generateTimetable, timetableToExcelData, addColorsToSubjects } from "@/lib/timetable-generator";

interface Cell {
  value: string;
  editable?: boolean;
  highlighted?: boolean;
  color?: string;
}

interface Subject {
  id: string;
  name: string;
  teacher: string;
  weeklyHours: number;
  color?: string;
}

const DAYS = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"];
const PERIODS = Array.from({ length: 8 }, (_, i) => i + 1);

// Main component wrapper with Suspense
export default function TimetableViewPage() {
  return (
    <Suspense fallback={<div className="p-8 text-center">Loading timetable view...</div>}>
      <TimetableViewContent />
    </Suspense>
  );
}

// Internal component that uses useSearchParams
function TimetableViewContent() {
  const searchParams = useSearchParams();
  const autoGenerate = searchParams.get("auto") === "true";
  const [timetableData, setTimetableData] = useState<Cell[][]>([]);
  const [subjects, setSubjects] = useState<Subject[]>([]);
  const [isAutoGenerated, setIsAutoGenerated] = useState(false);
  const [showStats, setShowStats] = useState(false);

  useEffect(() => {
    // Initialize empty timetable data
    const headerRow: Cell[] = [
      { value: "Period/Day", editable: false, highlighted: true },
      ...DAYS.map((day) => ({ value: day, editable: false, highlighted: true })),
    ];

    const dataRows = PERIODS.map((period) => {
      const row: Cell[] = [
        {
          value: period === 4 ? `Period ${period} (Lunch after)` : `Period ${period}`,
          editable: false,
          highlighted: period === 4,
        },
      ];

      // Add empty cells for each day
      DAYS.forEach(() => {
        row.push({
          value: "",
          editable: true,
          highlighted: period === 4,
        });
      });

      return row;
    });

    setTimetableData([headerRow, ...dataRows]);

    // Load subjects from localStorage
    const storedSubjects = localStorage.getItem("timetableSubjects");
    if (storedSubjects) {
      const parsedSubjects = JSON.parse(storedSubjects);
      // Add colors to subjects
      const coloredSubjects = addColorsToSubjects(parsedSubjects);
      setSubjects(coloredSubjects);

      // Auto-generate if requested
      if (autoGenerate && parsedSubjects.length > 0) {
        setTimeout(() => {
          handleAutoGenerate(coloredSubjects);
        }, 100);
      }
    }
  }, [autoGenerate]);

  const handleCellChange = (rowIndex: number, colIndex: number, value: string) => {
    const newTimetableData = [...timetableData];
    newTimetableData[rowIndex][colIndex].value = value;
    setTimetableData(newTimetableData);
  };

  const setCellValue = (rowIndex: number, colIndex: number, value: string, color?: string) => {
    const newTimetableData = [...timetableData];
    if (newTimetableData[rowIndex] && newTimetableData[rowIndex][colIndex]) {
      newTimetableData[rowIndex][colIndex].value = value;
      if (color) {
        newTimetableData[rowIndex][colIndex].color = color;
      }
      setTimetableData(newTimetableData);
    }
  };

  const downloadExcel = () => {
    // Generate and download the Excel file directly from the browser
    const today = new Date().toISOString().split('T')[0];
    downloadTimetableAsExcel(timetableData, `timetable-${today}.xlsx`);
  };

  const downloadPDF = () => {
    // Generate and download the PDF file directly from the browser
    const today = new Date().toISOString().split('T')[0];
    downloadTimetableAsPDF(timetableData, `timetable-${today}.pdf`, "AI Generated School Timetable");
  };

  const downloadSubjectsPDF = () => {
    // Generate and download the subjects PDF file
    const today = new Date().toISOString().split('T')[0];
    downloadSubjectsAsPDF(subjects, `subjects-${today}.pdf`, "Subject List");
  };

  const handleAutoGenerate = (subjectsToUse = subjects) => {
    if (!subjectsToUse.length) {
      alert("Please add subjects before generating a timetable.");
      return;
    }

    // Generate timetable using our algorithm
    const generatedTimetable = generateTimetable(subjectsToUse, DAYS, PERIODS.length, 4);
    
    // Convert to Excel data format
    const excelData = timetableToExcelData(generatedTimetable, DAYS, subjectsToUse);
    
    // Update the timetable data
    setTimetableData(excelData);
    setIsAutoGenerated(true);
  };

  const handleClearTimetable = () => {
    // Reset to empty timetable
    const headerRow: Cell[] = [
      { value: "Period/Day", editable: false, highlighted: true },
      ...DAYS.map((day) => ({ value: day, editable: false, highlighted: true })),
    ];

    const dataRows = PERIODS.map((period) => {
      const row: Cell[] = [
        {
          value: period === 4 ? `Period ${period} (Lunch after)` : `Period ${period}`,
          editable: false,
          highlighted: period === 4,
        },
      ];

      // Add empty cells for each day
      DAYS.forEach(() => {
        row.push({
          value: "",
          editable: true,
          highlighted: period === 4,
        });
      });

      return row;
    });

    setTimetableData([headerRow, ...dataRows]);
    setIsAutoGenerated(false);
  };

  return (
    <div className="max-w-7xl mx-auto px-4 py-8">
      <div className="flex flex-wrap items-center justify-between mb-8">
        <h1 className="text-3xl font-bold">Editable Timetable View</h1>
        <div className="flex flex-wrap gap-4 mt-4 sm:mt-0">
          <Link
            href="/timetable"
            className="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700"
          >
            Back to Timetable
          </Link>
          <div className="relative inline-block">
            <button
              onClick={() => document.getElementById('exportDropdown')?.classList.toggle('hidden')}
              className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
            >
              Export Timetable
            </button>
            <div id="exportDropdown" className="hidden absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-10">
              <div className="py-1" role="menu" aria-orientation="vertical">
                <button
                  onClick={downloadExcel}
                  className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                  role="menuitem"
                >
                  Download as Excel (.xlsx)
                </button>
                <button
                  onClick={downloadPDF}
                  className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                  role="menuitem"
                >
                  Download as PDF
                </button>
                <button
                  onClick={downloadSubjectsPDF}
                  className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                  role="menuitem"
                >
                  Export Subject List
                </button>
                <button
                  onClick={() => window.print()}
                  className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                  role="menuitem"
                >
                  Print Timetable
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-white p-6 rounded-lg shadow-md mb-8">
        <div className="mb-4 flex flex-wrap items-center justify-between">
          <h2 className="text-xl font-semibold">Timetable</h2>
          <div className="flex flex-wrap gap-3 mt-2 sm:mt-0">
            <button
              onClick={() => handleAutoGenerate()}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
              disabled={!subjects.length}
            >
              Auto-Generate Timetable
            </button>
            {isAutoGenerated && (
              <button
                onClick={handleClearTimetable}
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
              >
                Clear Timetable
              </button>
            )}
            <button
              onClick={() => setShowStats(!showStats)}
              className={`px-4 py-2 rounded-md ${
                showStats ? 'bg-purple-700 hover:bg-purple-800' : 'bg-purple-600 hover:bg-purple-700'
              } text-white`}
            >
              {showStats ? 'Hide Analytics' : 'Show Analytics'}
            </button>
          </div>
        </div>
        
        <div className="mb-4">
          <p className="text-gray-600">
            Click on any cell to edit the content. All cells are editable except for the headers.
            Use the Auto-Generate button to create an optimal timetable based on your subjects and constraints.
          </p>
        </div>
        
        {timetableData.length > 0 && (
          <ExcelPreview data={timetableData} onCellChange={handleCellChange} />
        )}

        <div className="mt-4 text-sm text-gray-500">
          <strong>Note:</strong> The lunch break is scheduled after Period 4 every day, as highlighted.
          {isAutoGenerated && (
            <span className="ml-2">
              <strong>Auto-generated:</strong> Each subject has been assigned a color for better visibility.
            </span>
          )}
        </div>

        {subjects.length > 0 && (
          <div className="mt-6 grid grid-cols-2 md:grid-cols-4 gap-3">
            {subjects.map(subject => (
              <div 
                key={subject.id} 
                className="flex items-center gap-2 p-2 rounded-md"
                style={{ backgroundColor: subject.color || 'transparent' }}
              >
                <div className="font-medium">{subject.name}</div>
                <div className="text-sm text-gray-600">({subject.weeklyHours} hrs)</div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Analytics Dashboard */}
      {showStats && timetableData.length > 0 && (
        <TimetableStats timetableData={timetableData} subjects={subjects} />
      )}

      <div className="bg-blue-50 p-6 rounded-lg border border-blue-100">
        <h2 className="text-lg font-semibold mb-2">Need AI assistance?</h2>
        <p className="text-gray-700 mb-4">
          Our AI assistant can help you optimize your timetable based on teacher availability,
          classroom constraints, and subject requirements.
        </p>
        <Link
          href="/chat"
          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 inline-block"
        >
          Ask AI Assistant
        </Link>
      </div>

      {/* Print-only styles */}
      <style jsx global>{`
        @media print {
          body * {
            visibility: hidden;
          }
          .bg-white, .bg-white * {
            visibility: visible;
          }
          .bg-white {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
          }
          button, .bg-blue-50, .text-xs {
            display: none !important;
          }
        }
      `}</style>
    </div>
  );
} 